## GlobalScope
Global scope is used to launch top-level coroutines which are opertaing on the whole application lifetime and are not canelled prematurely. meaning that the liftetime of the new coroutines is limited only by the lifetime of the whole application.
## CoroutineScope

## Launch
Launches a new  coroutine without blocking the current thread and returns a reference to the coroutine as a job. The coroutine is cancelled when the resulting job is cancelled. 

## Run Block
Runs a new coroutine and blocks the current thread interruptibly until its completion. This function should not be used from a coroutine. It is designed to bridge regular blocking code to libraries that are written in suspending style. to be used i mmain functions and its test. 

## Job
A background job. Conceptually, a job is a cancellable thing with a life-cycle that culminates in its completion. Jobs can be arranged into parent-child hierarchies where cancellation of a parent leads to immediate cancellation of all it children recursively. Failure  of a child with an exception other than CancellationException immediately cancels its parent and consequently, all its other children. This behavior can be customized using Supervisorjob. 

## withContext
Call the specified suspending block witha given coroutine context, suspends until it sompletes, and returns the result. The resulting context for the block is derived by merging the current coroutineContext with the specified context using coroutineContext + context. This suspending function is cancellable. It immediately checks for acancellation of the resulting context and throws cancellationException if it is not active. 

## NonCancellable
A non-cancelable job that is always active. It is designe dfor withContext function to preven cancellation of code blocks that need to be executed without cancellation
