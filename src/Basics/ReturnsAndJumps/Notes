Kotlin has three jump expressions.
- return. By default returns from the nearest enclosing function or anonymous function
- break Terminates the nearest  enclosing loop
- continue, proceeds to the next step of the nearest enclosing loop.

All these expression can be use as a larger expression, this is a "nothing type".
```
 val s = person.name ?: return
```

Break and Continue labels
Any expression Kotlin may be marked with a label. Labels have the form of an identifier followed by the '@', for
example: abc@, foobar@
```
    loop@ for(i in 1..100) {
    if(...) break@loop
    }
```

A 'break' qualified with a label jumps to the execution point right after the loop marked with that label A continue proceeds
to the next iteration of that loop.

Return At Labels
With function literals, local functions and object expression, functions can be nested in Kotlin. Qualified returns allow
us to return from an outer function. The most important use case is returing from a lambda expression. Recall that when
we write this.
```
fun foo() {
    listOf(1,2,3,4,5).forEach {
    if(it == 3) return // non-local return directly to the caller of foo()
    print(it)
    }
    println("this point is unreachable")
}
```


When returning a value, the parser gives preference to the qualified return.
```
    return@a 1
```
means "return 1 at label @a" and not "return a label expression(@a 1)"