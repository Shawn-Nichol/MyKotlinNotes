## CoroutineScope
Helps to define the lifecycle of the of the coroutine. It can be application wide or boudn to a component liek and android activity. You use scope to start a coroutine.

- GlobalScope: is used to launch top-level coroutines which are opertaing on the whole application lifetime and are not canelled prematurely. meaning that the liftetime of the new coroutines is limited only by the lifetime of the whole application.

## CoroutineBuilders
These take a suspendding lambda as argument to create a coroutine. There are a bunch of coroutine builders provided by kotlin corotines, including async(), launch(), runBlocking()

- async

- launch: Launches a new corotuien without blockign the current thread and returns a refernce to the corotine as a job. 

- Run Block: Runs a new coroutine and blocks the current thread interruptibly until its completion. This function should not be used from a coroutine. It is designed to bridge regular blocking code to libraries that are written in suspending style. to be used i mmain functions and its test. 


## CoroutineDispatcher
Defines thread pools to launch coroutines, this could be the background thread pool, main thread or even your custom thread poo. You'll use this to switch between, and return results from threads. 

- Dispatchers.Default: CPU-intensive work.
- Dispatchers.IO: Networking or reading and writing form files.
- DIspatchers.Main: Recommend dispatcher for performing UI related events.

## Suspending functions
This kind of unction can be suspended without blocking the current thread. Instead of returning a simple value, it also knows in whcih context the caller suspended it. using this it can resume approperiatley when ready. 

## Job
A background job. Conceptually, a job is a cancellable thing with a life-cycle that culminates in its completion. Jobs can be arranged into parent-child hierarchies where cancellation of a parent leads to immediate cancellation of all it children recursively. Failure  of a child with an exception other than CancellationException immediately cancels its parent and consequently, all its other children. This behavior can be customized using Supervisorjob. 

- join: suspends the coroutine until this job is complete. This invocation resumes normally when the job is complete for any reason and the job of the invokin gcorotuine is still acitve. This function also start the corresponding coroutine if the job was still in a new state. 

## withContext
Call the specified suspending block witha given coroutine context, suspends until it sompletes, and returns the result. The resulting context for the block is derived by merging the current coroutineContext with the specified context using coroutineContext + context. This suspending function is cancellable. It immediately checks for acancellation of the resulting context and throws cancellationException if it is not active. 

## NonCancellable
A non-cancelable job that is always active. It is designe dfor withContext function to preven cancellation of code blocks that need to be executed without cancellation

## Deferred
Deferred value is a non blocking cancellable future it is a job with a result.  It is created with the async coroutine builder or via the constructor of CompletableDeferred calss. It is in active state while the value is being computed. 
